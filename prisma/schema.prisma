// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  first_name String
  last_name  String
  mail_id    String  @unique
  password   String?

  address         String
  student_test    student_test_details[]
  branch          branch                 @relation(fields: [branch_name], references: [branch_name])
  favourites_list favourites[]
  note            notes[]

  test_history test_history[]
  prof_image   String

  semesters       semesters         @relation(fields: [sem_no], references: [sem_no])
  sem_no          String
  role            Roles
  review          review[]
  test_details    test_details[]
  college         college           @relation(fields: [college_code], references: [college_code])
  college_code    String
  review_reply    review_reply[]
  branch_name     String
  user_details    user_details[]
  student_answers student_answers[]
  question_papers question_papers[]
}

model user_details {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  reg_no String? @unique
  bio    String?

  qualification String?
  users         users?  @relation(fields: [usersId], references: [id])
  usersId       String? @db.Uuid
}

enum Roles {
  STAFF
  STUDENT
}

model subjects {
  sub_code        String            @id
  sub_name        String
  semester        semesters         @relation(fields: [sem_no], references: [sem_no])
  sem_no          String
  notes           notes[]
  test_details    test_details[]
  question_papers question_papers[]
}

model semesters {
  sem_no       String         @id @unique
  test_details test_details[]
  user         users[]

  subjects subjects[]
  notes    notes[]
}

model branch {
  branch_name String @id @unique

  notes           notes[]
  users           users[]
  question_papers question_papers[]
}

model college {
  college_code    String  @id @unique
  college_name    String
  address         String
  college_mail    String
  college_website String
  user            users[]
}

model favourites {
  fav_id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  note     notes  @relation(fields: [notes_id], references: [id])
  notes_id String @db.Uuid
  users    users  @relation(fields: [usersId], references: [id])
  usersId  String @db.Uuid
}

model notes {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String

  unit_no          String
  unit_name        String
  branch           branch       @relation(fields: [branch_name], references: [branch_name])
  semester         semesters    @relation(fields: [sem_no], references: [sem_no])
  sem_no           String
  subject          subjects     @relation(fields: [sub_code], references: [sub_code])
  sub_code         String
  uploaded_date    DateTime?    @default(now())
  likes            Int
  dislikes         Int
  file_url         String?
  limit_visibility Boolean?     @default(false)
  favourites       favourites[]
  review           review[]
  users            users        @relation(fields: [usersId], references: [id])
  usersId          String       @db.Uuid
  branch_name      String
}

model review {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user           users          @relation(fields: [user_id], references: [id])
  user_id        String         @db.Uuid
  review_content String
  uploaded_date  DateTime
  note           notes          @relation(fields: [notes_id], references: [id])
  notes_id       String         @default(uuid()) @db.Uuid
  review_replies review_reply[]
}

model review_reply {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  users              users         @relation(fields: [usersId], references: [id])
  usersId            String        @db.Uuid
  review             review        @relation(fields: [reviewId], references: [id])
  reviewId           String        @db.Uuid
  reply              review_reply? @relation("own_reply")
  reply_review_reply review_reply? @relation("own_reply", fields: [review_reply_id], references: [id])
  review_reply_id    String?       @unique @db.Uuid
  content            String
}

model question_papers {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject       subjects  @relation(fields: [sub_code], references: [sub_code])
  sub_code      String
  branch        branch    @relation(fields: [branch_name], references: [branch_name])
  branch_name   String
  user          users     @relation(fields: [user_id], references: [id])
  user_id       String    @db.Uuid
  file_url      String?
  title         String
  year          String
  uploaded_date DateTime?
}

model test_details {
  test_id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  test_title String
  subject    subjects @relation(fields: [sub_code], references: [sub_code])
  sub_code   String

  questions_details    questions_details[]
  timelimit            DateTime?              @default(now())
  conduction_date      DateTime?              @default(now())
  lifetime             Boolean?               @default(false)
  end_date             DateTime?              @default(now())
  student_test_details student_test_details[]
  test_history         test_history[]

  users     users      @relation(fields: [usersId], references: [id])
  usersId   String     @db.Uuid
  semesters semesters? @relation(fields: [sem_no], references: [sem_no])
  sem_no    String?
}

model questions_details {
  q_id            String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question        String
  options         String[]
  answer          String
  test            test_details      @relation(fields: [test_id], references: [test_id])
  test_id         String            @default(uuid()) @db.Uuid
  student_answers student_answers[]
}

model student_test_details {
  id      String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  test    test_details @relation(fields: [test_id], references: [test_id])
  test_id String       @default(uuid()) @db.Uuid

  total_marks    Int
  duration       DateTime @default(now())
  submitted_date DateTime @default(now())
  users          users    @relation(fields: [usersId], references: [id])
  usersId        String   @db.Uuid
}

model student_answers {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  answer String

  questions_details questions_details @relation(fields: [q_id], references: [q_id])
  q_id              String            @db.Uuid
  users             users             @relation(fields: [usersId], references: [id])
  usersId           String            @db.Uuid
}

model test_history {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conduction_date DateTime     @default(now())
  test            test_details @relation(fields: [test_id], references: [test_id])
  test_id         String       @default(uuid()) @db.Uuid

  submitted_date  DateTime @default(now())
  marks_allocated Int
  users           users    @relation(fields: [usersId], references: [id])
  usersId         String   @db.Uuid
}
